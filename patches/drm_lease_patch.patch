From 4828d0ea6f97be36cc05a6fac4d7fb022557571f Mon Sep 17 00:00:00 2001
From: Micah Gorrell <micah.gorrell@venafi.com>
Date: Fri, 26 May 2023 08:17:20 -0600
Subject: [PATCH] Implemented support for the DRM lease protocol, as needed to
 use devices such as VR headsets

---
 dwl.c | 33 ++++++++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index b7436bb4f..b37c7353d 100644
--- a/dwl.c
+++ b/dwl.c
@@ -20,6 +20,7 @@
 #include <wlr/types/wlr_cursor.h>
 #include <wlr/types/wlr_data_control_v1.h>
 #include <wlr/types/wlr_data_device.h>
+#include <wlr/types/wlr_drm_lease_v1.h>
 #include <wlr/types/wlr_export_dmabuf_v1.h>
 #include <wlr/types/wlr_gamma_control_v1.h>
 #include <wlr/types/wlr_idle.h>
@@ -285,6 +286,7 @@ static void printstatus(void);
 static void quit(const Arg *arg);
 static void quitsignal(int signo);
 static void rendermon(struct wl_listener *listener, void *data);
+static void requestdrmlease(struct wl_listener *listener, void *data);
 static void requeststartdrag(struct wl_listener *listener, void *data);
 static void resize(Client *c, struct wlr_box geo, int interact);
 static void run(char *startup_cmd);
@@ -342,6 +344,7 @@ static struct wlr_idle *idle;
 static struct wlr_idle_notifier_v1 *idle_notifier;
 static struct wlr_idle_inhibit_manager_v1 *idle_inhibit_mgr;
 static struct wlr_input_inhibit_manager *input_inhibit_mgr;
+static struct wlr_drm_lease_v1_manager *drm_lease_manager;
 static struct wlr_layer_shell_v1 *layer_shell;
 static struct wlr_output_manager_v1 *output_mgr;
 static struct wlr_virtual_keyboard_manager_v1 *virtual_keyboard_mgr;
@@ -371,6 +374,7 @@ static struct wl_listener cursor_frame = {.notify = cursorframe};
 static struct wl_listener cursor_motion = {.notify = motionrelative};
 static struct wl_listener cursor_motion_absolute = {.notify = motionabsolute};
 static struct wl_listener drag_icon_destroy = {.notify = destroydragicon};
+static struct wl_listener drm_lease_request = {.notify = requestdrmlease};
 static struct wl_listener idle_inhibitor_create = {.notify = createidleinhibitor};
 static struct wl_listener idle_inhibitor_destroy = {.notify = destroyidleinhibitor};
 static struct wl_listener layout_change = {.notify = updatemons};
@@ -902,7 +906,17 @@ createmon(struct wl_listener *listener, void *data)
 	struct wlr_output *wlr_output = data;
 	const MonitorRule *r;
 	size_t i;
-	Monitor *m = wlr_output->data = ecalloc(1, sizeof(*m));
+	Monitor *m;
+
+	if (wlr_output->non_desktop) {
+		if (drm_lease_manager) {
+			wlr_drm_lease_v1_manager_offer_output(drm_lease_manager, wlr_output);
+		}
+
+		return;
+	}
+
+	m = wlr_output->data = ecalloc(1, sizeof(*m));
 	m->wlr_output = wlr_output;
 
 	wlr_output_init_render(wlr_output, alloc, drw);
@@ -1895,6 +1909,16 @@ rendermon(struct wl_listener *listener, void *data)
 	wlr_scene_output_send_frame_done(m->scene_output, &now);
 }
 
+static void requestdrmlease(struct wl_listener *listener, void *data) {
+	struct wlr_drm_lease_request_v1 *req = data;
+	struct wlr_drm_lease_v1 *lease = wlr_drm_lease_request_v1_grant(req);
+
+	if (!lease) {
+		fprintf(stderr, "Failed to grant lease request");
+		wlr_drm_lease_request_v1_reject(req);
+	}
+}
+
 void
 requeststartdrag(struct wl_listener *listener, void *data)
 {
@@ -2295,6 +2319,13 @@ setup(void)
 
 	wlr_scene_set_presentation(scene, wlr_presentation_create(dpy, backend));
 
+	drm_lease_manager = wlr_drm_lease_v1_manager_create(dpy, backend);
+	if (drm_lease_manager) {
+		wl_signal_add(&drm_lease_manager->events.request, &drm_lease_request);
+	} else {
+		fprintf(stderr, "Failed to create wlr_drm_lease_device_v1; VR will not be available");
+	}
+
 #ifdef XWAYLAND
 	/*
 	 * Initialise the XWayland X server.
